{"version":3,"sources":["components/NavBar.jsx","components/SideBar.jsx","components/Notice.jsx","components/WhaleFinder.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","SideBar","props","onMammalSelect","id","name","map","mammal","key","onClick","Notice","state","content","selectedMammal","sighting","count","latitude","longitude","description","target","rel","this","getContent","Component","WhaleFinder","options","center","lat","lng","zoom","handleSeaMammalSelect","a","endpoint","axios","get","then","res","sightings","data","markers","length","i","setMap","marker","window","google","maps","Marker","position","animation","Animation","DROP","addListener","e","setState","push","Map","document","getElementById","onScriptLoad","s","createElement","src","x","getElementsByTagName","parentNode","insertBefore","addEventListener","style","width","height","margin","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a18c7223.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"/#\">\n        Whale Finder\n      </a>\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarSupportedContent\"\n        aria-controls=\"navbarSupportedContent\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\" />\n      </button>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\n\nconst SideBar = props => {\n  const { onMammalSelect } = props;\n  const seaMammals = [\n    { id: 1, name: \"orca\" },\n    { id: 3, name: \"gray whale\" },\n    { id: 4, name: \"humpback\" },\n    { id: 5, name: \"atlantic white-sided dolphin\" },\n    { id: 6, name: \"pacific white-sided dolphin\" },\n    { id: 8, name: \"harbor porpoise\" },\n    { id: 9, name: \"harbor seal\" },\n    { id: 10, name: \"northern elephant seal\" },\n    { id: 13, name: \"steller sea lion\" },\n    { id: 14, name: \"sea otter\" }\n  ];\n\n  return (\n    <ul className=\"list-group sidebar\">\n      {seaMammals.map(mammal => (\n        <li\n          key={mammal.id}\n          onClick={() => onMammalSelect(mammal.name)}\n          className=\"list-group-item\"\n        >\n          {mammal.name}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default SideBar;\n","import React, { Component } from \"react\";\n\nclass Notice extends Component {\n  state = {};\n\n  getContent(content) {\n    // console.log(content);\n    if (!content.selectedMammal) {\n      return (\n        <div>\n          <p>\n            Welcome to the Whale Finder. All data is collected from sightings\n            reported to the{\" \"}\n            <a\n              href=\"https://whalemuseum.org\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Whale Museum\n            </a>\n            .\n          </p>\n          <p>\n            Please click on an animal on the left to get the latest sighting\n            info.\n          </p>\n        </div>\n      );\n    } else if (content.selectedMammal && !content.sighting) {\n      return (\n        <div>\n          There have been {content.count} {content.selectedMammal} sigthings.\n          Click on each marker for details.\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <p>\n            This {content.selectedMammal} was sighted at latitude:\n            {content.sighting.latitude}, longitude: {content.sighting.longitude}\n            .\n          </p>\n          <p>{content.sighting.description}</p>\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return <div className=\"notice\">{this.getContent(this.props.content)}</div>;\n  }\n}\n\nexport default Notice;\n","import React, { Component } from \"react\";\nimport SideBar from \"./SideBar\";\nimport Notice from \"./Notice\";\nimport axios from \"axios\";\n\nclass WhaleFinder extends Component {\n  state = {\n    options: {\n      center: { lat: 48, lng: -124 },\n      zoom: 5\n    },\n    content: {}\n  };\n\n  onScriptLoad() {\n    var map = new window.google.maps.Map(\n      document.getElementById(\"myMap\"),\n      this.state.options\n    );\n\n    this.setState({ map });\n  }\n\n  componentDidMount() {\n    if (!window.google) {\n      var s = document.createElement(\"script\");\n      s.type = \"text/javascript\";\n      s.src = `https://maps.google.com/maps/api/js?key=AIzaSyCtMc04B4UNQSPJ0LbiZqkK7ZtlRFKmBSU`;\n      var x = document.getElementsByTagName(\"script\")[0];\n      x.parentNode.insertBefore(s, x);\n      // Below is important.\n      //We cannot access google.maps until it's finished loading\n      s.addEventListener(\"load\", e => {\n        this.onScriptLoad();\n      });\n    } else {\n      this.onScriptLoad();\n    }\n  }\n\n  handleSeaMammalSelect = async mammal => {\n    let endpoint =\n      \"https://hotline.whalemuseum.org/api.json?limit=500&species=\";\n    endpoint += mammal;\n\n    axios.get(endpoint).then(res => {\n      let sightings = res.data,\n        markers = [],\n        count = sightings.length,\n        content = { count: count };\n\n      if (this.state.markers) {\n        for (let i = 0; i < this.state.markers.length; i++) {\n          this.state.markers[i].setMap(null);\n        }\n      }\n\n      sightings.map(sighting => {\n        let marker = new window.google.maps.Marker({\n          position: { lat: sighting.latitude, lng: sighting.longitude },\n          map: this.state.map,\n          animation: window.google.maps.Animation.DROP\n        });\n        marker.addListener(\"click\", e => {\n          content.sighting = sighting;\n          this.setState({ content });\n        });\n        markers.push(marker);\n        return 0;\n      });\n\n      content.selectedMammal = mammal;\n      this.setState({ content, markers });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"main-wrapper\">\n        <SideBar onMammalSelect={this.handleSeaMammalSelect} />\n        <div className=\"right-side\">\n          <div\n            style={{ width: \"75%\", height: \"75%\", margin: \"10px auto\" }}\n            id=\"myMap\"\n          ></div>\n          <Notice content={this.state.content} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WhaleFinder;\n","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport WhaleFinder from \"./components/WhaleFinder\";\n\n// import axios from \"axios\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <div className=\"row main-content\">\n        <WhaleFinder />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n// import { axios } from \"axios\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}